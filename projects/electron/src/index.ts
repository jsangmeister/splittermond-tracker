import { app, BrowserWindow, dialog, ipcMain } from 'electron';
import { updateElectronApp } from 'update-electron-app';
import { readFileSync } from 'fs';
import Store from 'electron-store';
import path from 'path';

let mainWindow: BrowserWindow | null;

const store = new Store();

updateElectronApp();

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 800,
    width: 1200,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
    },
    autoHideMenuBar: true,
  });

  const startURL = app.isPackaged
    ? `file://${path.join(__dirname, 'splittermond-tracker', 'index.html')}`
    : `http://localhost:4200`;

  void mainWindow.loadURL(startURL);
  if (!app.isPackaged) {
    mainWindow.webContents.openDevTools();
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
void app.whenReady().then(() => {
  createWindow();

  /**
   * 0: default behaviour - open last char if exists, otherwise ask for char file
   * 1: always ask for char file, ignore last opened char
   * 2: never ask for char file, open only last char if possible
   */
  ipcMain.handle('load-character', async (_, mode: number) => {
    let path =
      mode === 1
        ? undefined
        : (store.get('last-character-path') as string | undefined);
    if (!path && mode !== 2) {
      const { canceled, filePaths } = await dialog.showOpenDialog({});
      if (!canceled) {
        path = filePaths[0];
        store.set('last-character-path', path);
      }
    }
    if (path) {
      return readFileSync(path, { encoding: 'utf-8' });
    }
  });

  ipcMain.handle('storage-get', (_, key: string) => {
    return store.get(key);
  });

  ipcMain.handle('storage-set', (_, key: string, data: unknown) => {
    store.set(key, data);
  });

  ipcMain.handle('confirm', async (_, message: string) => {
    const res = await dialog.showMessageBox({
      message,
      type: 'question',
      buttons: ['Ja', 'Nein'],
      defaultId: 1,
    });
    return res.response === 0;
  });

  ipcMain.handle('show-credits', () => {
    void dialog.showMessageBox({
      message: `
Â© Credits:
Sleep icons created by Freepik - Flaticon (https://www.flaticon.com/free-icons/sleep)
Revert icons created by KP Arts - Flaticon (https://www.flaticon.com/free-icons/revert)
Folder icons created by kmg design - Flaticon (https://www.flaticon.com/free-icons/folder)
Other icons generated by ChatGPT and further edited
`,
    });
  });

  ipcMain.handle('set-window-size', (_, width: number, height: number) => {
    if (!app.isPackaged) {
      width += 500;
    }
    mainWindow?.setSize(width, height);
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
